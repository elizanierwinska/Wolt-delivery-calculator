{"ast":null,"code":"/**\n * getDeliveryFee returns the total delivery fee.\n *\n * @param {DeliveryFeeProps} props - The props for calculating delivery fees\n * @returns {number} The total delivery fee\n */\nexport default function getDeliveryFee(props) {\n  return calculateTotalDeliveryFee(props.cartValue, getCartSurcharge(props.cartValue), getDeliveryFeeByDistance(props.deliveryDistance), getItemSurcharge(props.amountOfItems), getFridayRushSurcharge(props.time));\n}\n\n/**\n * getCartSurcharge returns the surcharge related to cart value.\n *\n * @param {number} cartValue - The value of the cart\n * @returns {number} The surcharge\n */\nexport function getCartSurcharge(cartValue) {\n  if (cartValue > 0) {\n    if (cartValue < 10) {\n      return 10 - cartValue;\n    }\n  }\n  return 0;\n}\n\n/**\n * getDeliveryFeeByDistance returns the fees based on distance.\n *\n * @param {number} meters - The distance for the delivery in meters\n * @returns {number} The delivery fee based on the distance\n */\nexport function getDeliveryFeeByDistance(meters) {\n  if (meters > 0) {\n    return Math.ceil(meters / 500);\n  }\n  return 1;\n}\n\n/**\n * getItemSurcharge returns the surcharge based on the number of items in the cart.\n *\n * @param {number} itemNumber - Number of items in the cart\n * @returns {number} Surcharge based on the number of items\n */\nexport function getItemSurcharge(itemNumber) {\n  if (itemNumber > 4 && itemNumber < 12) {\n    return (itemNumber - 4) * 0.5;\n  } else if (itemNumber > 12) {\n    return (itemNumber - 4) * 0.5 + 1.2;\n  }\n  return 0;\n}\n\n/**\n * getFridayRushSurcharge returns the Friday Rush rate if applicable.\n * The rate is either 1 or 1.2.\n *\n * @param {string} date - The date for the order\n * @returns {number} The surcharge rate\n */\nexport function getFridayRushSurcharge(date) {\n  const currentDate = new Date(date);\n  if (!isNaN(Number(currentDate))) {\n    if (currentDate.getDay() === 5) {\n      let currentDateTime = new Date();\n      if (currentDateTime.getHours() >= 15 && currentDateTime.getHours() < 19) {\n        return 1.2;\n      }\n    }\n  }\n  return 1;\n}\n\n/**\n * calculateTotalDeliveryFee returns the total delivery fee based on\n * the current cart value, number of items, distance, and whether the time\n * of the order is during Friday rush hour.\n *\n * @param {number} cartValue - Current cart value\n * @param {number} cartSurcharge - Surcharge from the current cart value\n * @param {number} distanceFee - Fee of the delivery based on distance\n * @param {number} itemsSurcharge - Surcharge from the current items in cart\n * @param {number} fridayRushFeeMultiplier - Friday rush delivery rate\n * @returns {number} The total delivery fee\n */\nexport function calculateTotalDeliveryFee(cartValue, cartSurcharge, distanceFee, itemsSurcharge, fridayRushFeeMultiplier) {\n  if (cartValue >= 200) {\n    return 0;\n  } else {\n    let sum = (cartSurcharge + distanceFee + itemsSurcharge) * fridayRushFeeMultiplier;\n    return Math.min(15, sum);\n  }\n}","map":{"version":3,"names":["getDeliveryFee","props","calculateTotalDeliveryFee","cartValue","getCartSurcharge","getDeliveryFeeByDistance","deliveryDistance","getItemSurcharge","amountOfItems","getFridayRushSurcharge","time","meters","Math","ceil","itemNumber","date","currentDate","Date","isNaN","Number","getDay","currentDateTime","getHours","cartSurcharge","distanceFee","itemsSurcharge","fridayRushFeeMultiplier","sum","min"],"sources":["/Users/eliza/projects/wolt/src/calculate.ts"],"sourcesContent":["interface DeliveryFeeProps {\n  cartValue: number;\n  deliveryDistance: number;\n  amountOfItems: number;\n  time: string;\n}\n\n/**\n * getDeliveryFee returns the total delivery fee.\n *\n * @param {DeliveryFeeProps} props - The props for calculating delivery fees\n * @returns {number} The total delivery fee\n */\nexport default function getDeliveryFee(props: DeliveryFeeProps): number {\n  return calculateTotalDeliveryFee(\n    props.cartValue,\n    getCartSurcharge(props.cartValue),\n    getDeliveryFeeByDistance(props.deliveryDistance),\n    getItemSurcharge(props.amountOfItems),\n    getFridayRushSurcharge(props.time)\n  );\n}\n\n/**\n * getCartSurcharge returns the surcharge related to cart value.\n *\n * @param {number} cartValue - The value of the cart\n * @returns {number} The surcharge\n */\nexport function getCartSurcharge(cartValue: number): number {\n  if (cartValue > 0) {\n    if (cartValue < 10) {\n      return 10 - cartValue;\n    }\n  }\n  return 0;\n}\n\n/**\n * getDeliveryFeeByDistance returns the fees based on distance.\n *\n * @param {number} meters - The distance for the delivery in meters\n * @returns {number} The delivery fee based on the distance\n */\nexport function getDeliveryFeeByDistance(meters: number): number {\n  if (meters > 0) {\n    return Math.ceil(meters / 500);\n  }\n  return 1;\n}\n\n/**\n * getItemSurcharge returns the surcharge based on the number of items in the cart.\n *\n * @param {number} itemNumber - Number of items in the cart\n * @returns {number} Surcharge based on the number of items\n */\nexport function getItemSurcharge(itemNumber: number): number {\n  if (itemNumber > 4 && itemNumber < 12) {\n    return (itemNumber - 4) * 0.5;\n  } else if (itemNumber > 12) {\n    return (itemNumber - 4) * 0.5 + 1.2;\n  }\n  return 0;\n}\n\n/**\n * getFridayRushSurcharge returns the Friday Rush rate if applicable.\n * The rate is either 1 or 1.2.\n *\n * @param {string} date - The date for the order\n * @returns {number} The surcharge rate\n */\nexport function getFridayRushSurcharge(date: string): number {\n  const currentDate = new Date(date);\n  if (!isNaN(Number(currentDate))) {\n    if (currentDate.getDay() === 5) {\n      let currentDateTime = new Date();\n      if (currentDateTime.getHours() >= 15 && currentDateTime.getHours() < 19) {\n        return 1.2;\n      }\n    }\n  }\n  return 1;\n}\n\n/**\n * calculateTotalDeliveryFee returns the total delivery fee based on\n * the current cart value, number of items, distance, and whether the time\n * of the order is during Friday rush hour.\n *\n * @param {number} cartValue - Current cart value\n * @param {number} cartSurcharge - Surcharge from the current cart value\n * @param {number} distanceFee - Fee of the delivery based on distance\n * @param {number} itemsSurcharge - Surcharge from the current items in cart\n * @param {number} fridayRushFeeMultiplier - Friday rush delivery rate\n * @returns {number} The total delivery fee\n */\nexport function calculateTotalDeliveryFee(\n  cartValue: number,\n  cartSurcharge: number,\n  distanceFee: number,\n  itemsSurcharge: number,\n  fridayRushFeeMultiplier: number\n): number {\n  if (cartValue >= 200) {\n    return 0;\n  } else {\n    let sum =\n      (cartSurcharge + distanceFee + itemsSurcharge) * fridayRushFeeMultiplier;\n    return Math.min(15, sum);\n  }\n}\n"],"mappings":"AAOA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,cAAcA,CAACC,KAAuB,EAAU;EACtE,OAAOC,yBAAyB,CAC9BD,KAAK,CAACE,SAAS,EACfC,gBAAgB,CAACH,KAAK,CAACE,SAAS,CAAC,EACjCE,wBAAwB,CAACJ,KAAK,CAACK,gBAAgB,CAAC,EAChDC,gBAAgB,CAACN,KAAK,CAACO,aAAa,CAAC,EACrCC,sBAAsB,CAACR,KAAK,CAACS,IAAI,CACnC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASN,gBAAgBA,CAACD,SAAiB,EAAU;EAC1D,IAAIA,SAAS,GAAG,CAAC,EAAE;IACjB,IAAIA,SAAS,GAAG,EAAE,EAAE;MAClB,OAAO,EAAE,GAAGA,SAAS;IACvB;EACF;EACA,OAAO,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,wBAAwBA,CAACM,MAAc,EAAU;EAC/D,IAAIA,MAAM,GAAG,CAAC,EAAE;IACd,OAAOC,IAAI,CAACC,IAAI,CAACF,MAAM,GAAG,GAAG,CAAC;EAChC;EACA,OAAO,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASJ,gBAAgBA,CAACO,UAAkB,EAAU;EAC3D,IAAIA,UAAU,GAAG,CAAC,IAAIA,UAAU,GAAG,EAAE,EAAE;IACrC,OAAO,CAACA,UAAU,GAAG,CAAC,IAAI,GAAG;EAC/B,CAAC,MAAM,IAAIA,UAAU,GAAG,EAAE,EAAE;IAC1B,OAAO,CAACA,UAAU,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG;EACrC;EACA,OAAO,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASL,sBAAsBA,CAACM,IAAY,EAAU;EAC3D,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;EAClC,IAAI,CAACG,KAAK,CAACC,MAAM,CAACH,WAAW,CAAC,CAAC,EAAE;IAC/B,IAAIA,WAAW,CAACI,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;MAC9B,IAAIC,eAAe,GAAG,IAAIJ,IAAI,CAAC,CAAC;MAChC,IAAII,eAAe,CAACC,QAAQ,CAAC,CAAC,IAAI,EAAE,IAAID,eAAe,CAACC,QAAQ,CAAC,CAAC,GAAG,EAAE,EAAE;QACvE,OAAO,GAAG;MACZ;IACF;EACF;EACA,OAAO,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASpB,yBAAyBA,CACvCC,SAAiB,EACjBoB,aAAqB,EACrBC,WAAmB,EACnBC,cAAsB,EACtBC,uBAA+B,EACvB;EACR,IAAIvB,SAAS,IAAI,GAAG,EAAE;IACpB,OAAO,CAAC;EACV,CAAC,MAAM;IACL,IAAIwB,GAAG,GACL,CAACJ,aAAa,GAAGC,WAAW,GAAGC,cAAc,IAAIC,uBAAuB;IAC1E,OAAOd,IAAI,CAACgB,GAAG,CAAC,EAAE,EAAED,GAAG,CAAC;EAC1B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}